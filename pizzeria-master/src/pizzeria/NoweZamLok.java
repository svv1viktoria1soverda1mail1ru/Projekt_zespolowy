/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pizzeria;

import java.awt.event.KeyEvent;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;

/**
 *
 * @author sk
 */
public class NoweZamLok extends javax.swing.JFrame {

    Connection con;
    Statement stmt1, stmt2, stmt3, stmt4, stmt7, stmt5, stmt6, stmt8, stmt9, stmt10, stmt11, stmt12, stmt13, stmt14, stmt15;
    ResultSet res, res1, res2, res3, res4, res5, res6, res7, res8, res9, res10, res11, res12, res13, res14, res15;
    DefaultListModel<String> model = new DefaultListModel<>();
    DefaultListModel<String> modelzamp = new DefaultListModel<>();
    DefaultListModel<String> modelzamn = new DefaultListModel<>();

    public NoweZamLok() {
        initComponents();
        panelpizza.setVisible(false);
        panelnapoj.setVisible(false);
        opisnapoju.setLineWrap(true);
        cena.setText("");
        panelskladniki.setVisible(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroupmiejsce = new javax.swing.ButtonGroup();
        buttonGroupoplata = new javax.swing.ButtonGroup();
        napistytul = new javax.swing.JLabel();
        pokazpanelpizza = new javax.swing.JToggleButton();
        panelpizza = new javax.swing.JPanel();
        napisnazwapizzy = new javax.swing.JLabel();
        listawybpizzy = new javax.swing.JComboBox();
        napisrozmiarpizzy = new javax.swing.JLabel();
        listawybrozmpizzy = new javax.swing.JComboBox();
        listawybciastapizzy = new javax.swing.JComboBox();
        napisrodzajciasta = new javax.swing.JLabel();
        panelskladniki = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        listaskladnikow = new javax.swing.JList();
        napisdodwybskl = new javax.swing.JLabel();
        usuns = new javax.swing.JButton();
        dodajs = new javax.swing.JComboBox();
        dodajw = new javax.swing.JButton();
        zobskl = new javax.swing.JToggleButton();
        dodajdomenup = new javax.swing.JButton();
        cena = new javax.swing.JTextField();
        napis_zl = new javax.swing.JLabel();
        napisilepizz = new javax.swing.JLabel();
        poleilep = new javax.swing.JTextField();
        pokazpanelnapoj = new javax.swing.JToggleButton();
        napiszamowiono = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        listazamowienpizzy = new javax.swing.JList();
        wlokalu = new javax.swing.JRadioButton();
        wdostawie = new javax.swing.JRadioButton();
        gotowka = new javax.swing.JRadioButton();
        formazam = new javax.swing.JLabel();
        karta = new javax.swing.JRadioButton();
        formaoplaty = new javax.swing.JLabel();
        napis_zl1 = new javax.swing.JLabel();
        cena1 = new javax.swing.JTextField();
        powrot = new javax.swing.JButton();
        panelnapoj = new javax.swing.JPanel();
        napisrodzajnapoju = new javax.swing.JLabel();
        listawybrodznap = new javax.swing.JComboBox();
        napisnazwanapoju = new javax.swing.JLabel();
        listawybnazwynap = new javax.swing.JComboBox();
        dlapelnoletnich = new javax.swing.JLabel();
        pokazopisnapoju = new javax.swing.JToggleButton();
        dodajdomenunap = new javax.swing.JButton();
        cena2 = new javax.swing.JTextField();
        napis_zl2 = new javax.swing.JLabel();
        napisilenap = new javax.swing.JLabel();
        poleilenap = new javax.swing.JTextField();
        panelopisnap = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        opisnapoju = new javax.swing.JTextArea();
        buttonpotwierdz = new javax.swing.JButton();
        usunpozycjep = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane4 = new javax.swing.JScrollPane();
        listazamowiennapojow = new javax.swing.JList<>();
        jLabel3 = new javax.swing.JLabel();
        buttonusunn = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(1370, 720));
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        napistytul.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        napistytul.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        napistytul.setText("Nowe zamówienie");
        getContentPane().add(napistytul, new org.netbeans.lib.awtextra.AbsoluteConstraints(252, 4, 384, 42));

        pokazpanelpizza.setText("Pizza");
        pokazpanelpizza.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pokazpanelpizzaActionPerformed(evt);
            }
        });
        getContentPane().add(pokazpanelpizza, new org.netbeans.lib.awtextra.AbsoluteConstraints(88, 64, 290, 50));

        panelpizza.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        panelpizza.setPreferredSize(new java.awt.Dimension(390, 540));
        panelpizza.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        napisnazwapizzy.setText("Nazwa pizzy:");
        panelpizza.add(napisnazwapizzy, new org.netbeans.lib.awtextra.AbsoluteConstraints(21, 11, 150, -1));

        listawybpizzy.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "" }));
        listawybpizzy.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                listawybpizzyItemStateChanged(evt);
            }
        });
        panelpizza.add(listawybpizzy, new org.netbeans.lib.awtextra.AbsoluteConstraints(21, 31, 150, -1));

        napisrozmiarpizzy.setText("Rozmiar:");
        panelpizza.add(napisrozmiarpizzy, new org.netbeans.lib.awtextra.AbsoluteConstraints(21, 57, 150, -1));

        listawybrozmpizzy.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "" }));
        listawybrozmpizzy.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                listawybrozmpizzyItemStateChanged(evt);
            }
        });
        panelpizza.add(listawybrozmpizzy, new org.netbeans.lib.awtextra.AbsoluteConstraints(21, 77, 150, -1));

        listawybciastapizzy.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "" }));
        listawybciastapizzy.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                listawybciastapizzyItemStateChanged(evt);
            }
        });
        panelpizza.add(listawybciastapizzy, new org.netbeans.lib.awtextra.AbsoluteConstraints(21, 123, 150, -1));

        napisrodzajciasta.setText("Rodzaj ciasta:");
        panelpizza.add(napisrodzajciasta, new org.netbeans.lib.awtextra.AbsoluteConstraints(21, 103, 150, -1));

        listaskladnikow.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        jScrollPane1.setViewportView(listaskladnikow);

        napisdodwybskl.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        napisdodwybskl.setText("Dodaj składnik:");
        napisdodwybskl.setToolTipText("");

        usuns.setText("Usuń składnik");
        usuns.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                usunsActionPerformed(evt);
            }
        });

        dodajs.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "" }));
        dodajs.setToolTipText("");

        dodajw.setText("Dodaj wybrany");
        dodajw.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dodajwActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout panelskladnikiLayout = new javax.swing.GroupLayout(panelskladniki);
        panelskladniki.setLayout(panelskladnikiLayout);
        panelskladnikiLayout.setHorizontalGroup(
            panelskladnikiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelskladnikiLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 169, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(panelskladnikiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(panelskladnikiLayout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addGroup(panelskladnikiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(napisdodwybskl, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(panelskladnikiLayout.createSequentialGroup()
                                .addComponent(dodajs, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelskladnikiLayout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(panelskladnikiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelskladnikiLayout.createSequentialGroup()
                                .addComponent(dodajw)
                                .addGap(50, 50, 50))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelskladnikiLayout.createSequentialGroup()
                                .addComponent(usuns, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(30, 30, 30))))))
        );
        panelskladnikiLayout.setVerticalGroup(
            panelskladnikiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelskladnikiLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(panelskladnikiLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(panelskladnikiLayout.createSequentialGroup()
                        .addComponent(napisdodwybskl, javax.swing.GroupLayout.PREFERRED_SIZE, 28, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(dodajs, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(dodajw, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(45, 45, 45)
                        .addComponent(usuns, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        panelpizza.add(panelskladniki, new org.netbeans.lib.awtextra.AbsoluteConstraints(11, 178, -1, 256));

        zobskl.setText("Zobacz składniki:");
        zobskl.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zobsklActionPerformed(evt);
            }
        });
        panelpizza.add(zobskl, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 150, 180, -1));

        dodajdomenup.setText("Dodaj do menu");
        dodajdomenup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dodajdomenupActionPerformed(evt);
            }
        });
        panelpizza.add(dodajdomenup, new org.netbeans.lib.awtextra.AbsoluteConstraints(160, 440, 197, 47));

        cena.setEditable(false);
        panelpizza.add(cena, new org.netbeans.lib.awtextra.AbsoluteConstraints(11, 466, 110, -1));

        napis_zl.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        napis_zl.setText("zl.");
        panelpizza.add(napis_zl, new org.netbeans.lib.awtextra.AbsoluteConstraints(125, 466, 31, -1));

        napisilepizz.setText("Ile:");
        panelpizza.add(napisilepizz, new org.netbeans.lib.awtextra.AbsoluteConstraints(11, 443, -1, -1));

        poleilep.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                poleilepKeyPressed(evt);
            }
        });
        panelpizza.add(poleilep, new org.netbeans.lib.awtextra.AbsoluteConstraints(45, 440, 60, -1));

        getContentPane().add(panelpizza, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 120, 428, 549));

        pokazpanelnapoj.setText("Napój");
        pokazpanelnapoj.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        pokazpanelnapoj.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pokazpanelnapojActionPerformed(evt);
            }
        });
        getContentPane().add(pokazpanelnapoj, new org.netbeans.lib.awtextra.AbsoluteConstraints(468, 64, 322, 50));

        napiszamowiono.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        napiszamowiono.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        napiszamowiono.setText("Zamówiono:");
        getContentPane().add(napiszamowiono, new org.netbeans.lib.awtextra.AbsoluteConstraints(930, 20, 165, 29));

        jScrollPane2.setViewportView(listazamowienpizzy);

        getContentPane().add(jScrollPane2, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 80, 360, 90));

        buttonGroupmiejsce.add(wlokalu);
        wlokalu.setText("w lokalu");
        getContentPane().add(wlokalu, new org.netbeans.lib.awtextra.AbsoluteConstraints(1040, 460, -1, -1));

        buttonGroupmiejsce.add(wdostawie);
        wdostawie.setText("w dostawie");
        getContentPane().add(wdostawie, new org.netbeans.lib.awtextra.AbsoluteConstraints(1040, 480, -1, -1));

        buttonGroupoplata.add(gotowka);
        gotowka.setText("gotówka");
        getContentPane().add(gotowka, new org.netbeans.lib.awtextra.AbsoluteConstraints(1040, 520, -1, -1));

        formazam.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        formazam.setText("Forma zamówienia:");
        getContentPane().add(formazam, new org.netbeans.lib.awtextra.AbsoluteConstraints(910, 460, 118, 29));

        buttonGroupoplata.add(karta);
        karta.setText("karta");
        getContentPane().add(karta, new org.netbeans.lib.awtextra.AbsoluteConstraints(1040, 540, -1, -1));

        formaoplaty.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        formaoplaty.setText("Forma opłaty:");
        getContentPane().add(formaoplaty, new org.netbeans.lib.awtextra.AbsoluteConstraints(890, 530, 118, 27));

        napis_zl1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        napis_zl1.setText("zl.");
        getContentPane().add(napis_zl1, new org.netbeans.lib.awtextra.AbsoluteConstraints(1080, 420, 31, -1));

        cena1.setEditable(false);
        cena1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cena1ActionPerformed(evt);
            }
        });
        getContentPane().add(cena1, new org.netbeans.lib.awtextra.AbsoluteConstraints(990, 420, 80, -1));

        powrot.setText("Powrót");
        powrot.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                powrotActionPerformed(evt);
            }
        });
        getContentPane().add(powrot, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 16, 143, -1));

        panelnapoj.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        panelnapoj.setPreferredSize(new java.awt.Dimension(248, 540));

        napisrodzajnapoju.setText("Rodzaj napoju:");

        listawybrodznap.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "" }));
        listawybrodznap.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                listawybrodznapItemStateChanged(evt);
            }
        });
        listawybrodznap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                listawybrodznapActionPerformed(evt);
            }
        });

        napisnazwanapoju.setText("Nazwa napoju:");

        listawybnazwynap.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "" }));
        listawybnazwynap.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                listawybnazwynapItemStateChanged(evt);
            }
        });

        pokazopisnapoju.setText("Zobacz opis:");
        pokazopisnapoju.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pokazopisnapojuActionPerformed(evt);
            }
        });

        dodajdomenunap.setText("Dodaj do menu");
        dodajdomenunap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dodajdomenunapActionPerformed(evt);
            }
        });

        cena2.setEditable(false);

        napis_zl2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        napis_zl2.setText("zl.");

        napisilenap.setText("Ile:");

        poleilenap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                poleilenapActionPerformed(evt);
            }
        });
        poleilenap.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                poleilenapKeyPressed(evt);
            }
        });

        opisnapoju.setEditable(false);
        opisnapoju.setColumns(20);
        opisnapoju.setRows(5);
        opisnapoju.setToolTipText("");
        opisnapoju.setAutoscrolls(false);
        opisnapoju.setMaximumSize(new java.awt.Dimension(40, 40));
        opisnapoju.setName(""); // NOI18N
        jScrollPane3.setViewportView(opisnapoju);

        javax.swing.GroupLayout panelopisnapLayout = new javax.swing.GroupLayout(panelopisnap);
        panelopisnap.setLayout(panelopisnapLayout);
        panelopisnapLayout.setHorizontalGroup(
            panelopisnapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelopisnapLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(19, Short.MAX_VALUE))
        );
        panelopisnapLayout.setVerticalGroup(
            panelopisnapLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelopisnapLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout panelnapojLayout = new javax.swing.GroupLayout(panelnapoj);
        panelnapoj.setLayout(panelnapojLayout);
        panelnapojLayout.setHorizontalGroup(
            panelnapojLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelnapojLayout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(panelnapojLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(napisnazwanapoju)
                    .addComponent(napisrodzajnapoju)
                    .addComponent(listawybnazwynap, 0, 202, Short.MAX_VALUE)
                    .addComponent(listawybrodznap, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelnapojLayout.createSequentialGroup()
                        .addComponent(pokazopisnapoju, javax.swing.GroupLayout.PREFERRED_SIZE, 143, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(17, 17, 17)))
                .addGap(18, 18, Short.MAX_VALUE)
                .addComponent(dlapelnoletnich, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, panelnapojLayout.createSequentialGroup()
                .addGap(0, 11, Short.MAX_VALUE)
                .addGroup(panelnapojLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(panelopisnap, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(panelnapojLayout.createSequentialGroup()
                        .addGroup(panelnapojLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(panelnapojLayout.createSequentialGroup()
                                .addComponent(napisilenap)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(poleilenap, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(panelnapojLayout.createSequentialGroup()
                                .addComponent(cena2, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(napis_zl2, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(46, 46, 46)))
                .addGap(39, 39, 39))
            .addGroup(panelnapojLayout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addComponent(dodajdomenunap, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        panelnapojLayout.setVerticalGroup(
            panelnapojLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(panelnapojLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(napisrodzajnapoju)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(listawybrodznap, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(napisnazwanapoju)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelnapojLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(dlapelnoletnich, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(listawybnazwynap))
                .addGap(18, 18, 18)
                .addComponent(pokazopisnapoju)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(panelopisnap, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 72, Short.MAX_VALUE)
                .addGroup(panelnapojLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(napisilenap, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(poleilenap, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(panelnapojLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cena2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(napis_zl2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(dodajdomenunap, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30))
        );

        getContentPane().add(panelnapoj, new org.netbeans.lib.awtextra.AbsoluteConstraints(468, 120, 322, 549));

        buttonpotwierdz.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        buttonpotwierdz.setText("Potwierdź zamówienie");
        buttonpotwierdz.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonpotwierdzActionPerformed(evt);
            }
        });
        getContentPane().add(buttonpotwierdz, new org.netbeans.lib.awtextra.AbsoluteConstraints(870, 580, 300, 60));

        usunpozycjep.setText("Usuń pozycję");
        usunpozycjep.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                usunpozycjepActionPerformed(evt);
            }
        });
        getContentPane().add(usunpozycjep, new org.netbeans.lib.awtextra.AbsoluteConstraints(950, 170, 130, -1));

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Jedzenie:");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(940, 60, 130, -1));

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel2.setText("Napoje:");
        getContentPane().add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(980, 230, -1, -1));

        listazamowiennapojow.setToolTipText("");
        jScrollPane4.setViewportView(listazamowiennapojow);

        getContentPane().add(jScrollPane4, new org.netbeans.lib.awtextra.AbsoluteConstraints(830, 250, 360, 90));

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        jLabel3.setText("Razem:");
        getContentPane().add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(930, 420, 50, 20));

        buttonusunn.setText("Usuń pozycję");
        buttonusunn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                buttonusunnActionPerformed(evt);
            }
        });
        getContentPane().add(buttonusunn, new org.netbeans.lib.awtextra.AbsoluteConstraints(950, 340, 130, -1));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void usunsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_usunsActionPerformed

        if (!listaskladnikow.isSelectionEmpty()) {
            int index = listaskladnikow.getSelectedIndex();
            String wybr = model.elementAt(index);
            if (wybr.contains("+")) {
                int l = wybr.length();
                String skladn = wybr.substring(0, l - 10);
                try {
                    con = DriverManager.getConnection(
                            "jdbc:derby://localhost:1527/BazaPizzerii", "pizzeria", "pizzeria"
                    );
                    stmt1 = con.createStatement();
                    stmt2 = con.createStatement();
                    res1 = stmt2.executeQuery("select max(id_szcz_o_skl) from szcz_o_skl where id_skladnika="
                            + "(select id_skladnika from skladniki where nazwa like '%" + skladn + "%') and id_szcz_o_pizzy=(select max(id_szcz_o_pizzy) from szcz_o_pizzy)"
                    );
                    while (res1.next()) {
                        int id_usuniete = res1.getInt("1");
                        stmt1.executeUpdate(
                                "delete from SZCZ_O_SKL where id_szcz_o_skl=" + id_usuniete + " and id_szcz_o_pizzy=(select max(id_szcz_o_pizzy) from szcz_o_pizzy)"
                        );
                        stmt1.executeUpdate(
                                "update SZCZ_O_SKL set id_szcz_o_skl=id_szcz_o_skl-1 where id_szcz_o_skl>" + id_usuniete
                        );
                    }
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(null, "Brak połączenia z bazą danych!");
                }
            }
            model.removeElementAt(index);
            listaskladnikow.setModel(model);
        } else {
            JOptionPane.showMessageDialog(null, "Nie wybrano składnika!");
        }
    }//GEN-LAST:event_usunsActionPerformed

    private void dodajwActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dodajwActionPerformed
        String wybr = dodajs.getSelectedItem().toString();
        int l = wybr.length();
        String skladn = wybr.substring(0, l - 10);
        if (wybr.length() > 1) {
            try {
                con = DriverManager.getConnection(
                        "jdbc:derby://localhost:1527/BazaPizzerii", "pizzeria", "pizzeria"
                );
                stmt1 = con.createStatement();
                stmt2 = con.createStatement();
                res2 = stmt2.executeQuery("SELECT COUNT(*) FROM SZCZ_O_SKL");
                while (res2.next()) {
                    if (res2.getInt("1") == 0) {
                        stmt1.executeUpdate(
                                "insert into SZCZ_O_SKL VALUES ((SELECT COUNT(*) FROM SZCZ_O_SKL)+1,(SELECT MAX(ID_SZCZ_O_PIZZY) FROM SZCZ_O_PIZZY),"
                                + "(SELECT ID_SKLADNIKA FROM SKLADNIKI WHERE NAZWA LIKE '" + skladn + "'))"
                        );
                    } else {
                        stmt1.executeUpdate(
                                "insert into SZCZ_O_SKL VALUES ((SELECT max(id_szcz_o_skl) FROM SZCZ_O_SKL)+1,(SELECT MAX(ID_SZCZ_O_PIZZY) FROM SZCZ_O_PIZZY),"
                                + "(SELECT ID_SKLADNIKA FROM SKLADNIKI WHERE NAZWA LIKE '" + skladn + "'))"
                        );
                    }
                }
                int i = model.getSize();
                model.add(i, wybr);
                listaskladnikow.setModel(model);
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(null, "Brak połączenia z bazą danych!");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Nie wybrano składnika!");
        }

    }//GEN-LAST:event_dodajwActionPerformed

    private void pokazpanelpizzaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pokazpanelpizzaActionPerformed
        if (pokazpanelpizza.isSelected() == true) {
            panelpizza.setVisible(true);
            zamowpizze();
        } else {
            panelpizza.setVisible(false);
            panelskladniki.setVisible(false);
            listawybpizzy.setSelectedIndex(0);
            listawybrozmpizzy.setSelectedIndex(0);
            listawybciastapizzy.setSelectedIndex(0);
            poleilep.setText("");
            cena.setText("");
            model.removeAllElements();
            listaskladnikow.setModel(model);
            zobskl.setSelected(false);
        }


    }//GEN-LAST:event_pokazpanelpizzaActionPerformed

    private void zobsklActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zobsklActionPerformed
        if (zobskl.isSelected() == true) {
            listaskladnikow.setModel(model);
            panelskladniki.setVisible(true);
            wypiszskladniki();
        } else {
            panelskladniki.setVisible(false);
            poleilep.setText("");
            cena.setText("");
            model.removeAllElements();
            listaskladnikow.setModel(model);
        }
    }//GEN-LAST:event_zobsklActionPerformed

    private void dodajdomenupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dodajdomenupActionPerformed
       
        String nazwa = listawybpizzy.getSelectedItem().toString();
        String rozmiar = listawybrozmpizzy.getSelectedItem().toString();
        String ciasto = listawybciastapizzy.getSelectedItem().toString();
        if (nazwa.length() > 1 && rozmiar.length() > 1 && ciasto.length() > 1) {
            try {
                int ile = Integer.parseInt(poleilep.getText());
                dodajzampizzy(nazwa, rozmiar, ciasto, ile);
                dodajpizzedozamowienia();
                double wartosczam;
                if (cena1.getText().length() > 0) {
                    wartosczam = Double.parseDouble(cena1.getText());
                } else {
                    wartosczam = 0;
                }
                double kosztpizzy = policzkosztpizzyzbazy();
                kosztpizzy += policzkosztskladnikow();
                kosztpizzy *= ile;
                wartosczam += kosztpizzy;
                cena1.setText(wartosczam + "");
                czyscpanelpizza();
            } catch (NumberFormatException nfe) {
                JOptionPane.showMessageDialog(null, "Niepoprawne dane!");
            }

        } else {
            JOptionPane.showMessageDialog(null, "Nic nie zamówiono!");
        }

    }//GEN-LAST:event_dodajdomenupActionPerformed

    private void powrotActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_powrotActionPerformed
        try {
            con = DriverManager.getConnection(
                    "jdbc:derby://localhost:1527/BazaPizzerii", "pizzeria", "pizzeria"
            );
            stmt11 = con.createStatement();
            stmt11.executeUpdate(
                    "delete from szcz_o_skl where id_szcz_o_pizzy in "
                    + "(select id_szcz_o_pizzy from szcz_o_pizzy where id_zam=(select max(id_zam) from zamowienie))"
            );
            stmt11.executeUpdate(
                    "delete from szcz_o_pizzy where id_zam=(select max(id_zam) from zamowienie)"
            );
            stmt11.executeUpdate(
                    "delete from szcz_o_napoju where id_zam=(select max(id_zam) from zamowienie)"
            );
            stmt11.executeUpdate(
                    "delete from zamowienie where id_zam=(select max(id_zam) from zamowienie)"
            );
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Brak połączenia z bazą danych!");
        }
        Zamowienia zam = new Zamowienia();
        zam.setLocationRelativeTo(null);
        zam.setVisible(true);
        dispose();
    }//GEN-LAST:event_powrotActionPerformed

    private void pokazpanelnapojActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pokazpanelnapojActionPerformed
        if (pokazpanelnapoj.isSelected() == true) {
            panelnapoj.setVisible(true);
            panelopisnap.setVisible(false);
            wypiszrodzaje();
        } else {
            panelnapoj.setVisible(false);
            listawybnazwynap.removeAllItems();
            listawybrodznap.setSelectedIndex(0);
            poleilenap.setText("");
            cena2.setText("");
        }
    }//GEN-LAST:event_pokazpanelnapojActionPerformed

    private void dodajdomenunapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dodajdomenunapActionPerformed
        if (listawybnazwynap.getSelectedIndex() != -1) {
            String nazwanap = listawybnazwynap.getSelectedItem().toString();
            if (nazwanap.length() > 1) {
                try {
                    int ile = Integer.parseInt(poleilenap.getText());
                    dodajzamnapoju(nazwanap, ile);
                    dodajnapojdozamowienia();
                    double wartosczam;
                    if (cena1.getText().length() > 0) {
                        wartosczam = Double.parseDouble(cena1.getText());
                    } else {
                        wartosczam = 0;
                    }
                    double kosztnapoju = policzkosztnapojuzbazy();
                    kosztnapoju *= ile;
                    wartosczam += kosztnapoju;
                    cena1.setText(wartosczam + "");
                    czyscpanelnapoje();
                } catch (NumberFormatException nfe) {
                    JOptionPane.showMessageDialog(null, "Niepoprawne dane!");
                }
            } else {
                JOptionPane.showMessageDialog(null, "Nic nie zamówiono!");
            }
        } else {
            JOptionPane.showMessageDialog(null, "Nic nie zamówiono!");
        }
    }//GEN-LAST:event_dodajdomenunapActionPerformed

    private void pokazopisnapojuActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pokazopisnapojuActionPerformed
        if (pokazopisnapoju.isSelected() == true) {
            String nazwa = listawybnazwynap.getSelectedItem().toString();
            dodajopis(nazwa);
            panelopisnap.setVisible(true);
        } else {
            panelopisnap.setVisible(false);
            opisnapoju.setText("");
        }
    }//GEN-LAST:event_pokazopisnapojuActionPerformed

    private void listawybrodznapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_listawybrodznapActionPerformed


    }//GEN-LAST:event_listawybrodznapActionPerformed

    private void listawybrodznapItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_listawybrodznapItemStateChanged
        listawybnazwynap.removeAllItems();
        listawybnazwynap.addItem(" ");
        String rodzaj = listawybrodznap.getSelectedItem().toString();
        pokaznazwynapojow(rodzaj);

    }//GEN-LAST:event_listawybrodznapItemStateChanged

    private void listawybnazwynapItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_listawybnazwynapItemStateChanged
        pokazopisnapoju.setSelected(false);
        panelopisnap.setVisible(false);
        opisnapoju.setText("");
    }//GEN-LAST:event_listawybnazwynapItemStateChanged

    private void poleilepKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_poleilepKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            try {
                String nazwa = listawybpizzy.getSelectedItem().toString();
                String rozmiar = listawybrozmpizzy.getSelectedItem().toString();
                String ciasto = listawybciastapizzy.getSelectedItem().toString();
                int ile = Integer.parseInt(poleilep.getText());
                if (nazwa.length() > 1 && rozmiar.length() > 1 && ciasto.length() > 1) {
                    Double cenap = podajkosztpizzy();
                    cenap += podajkosztskladnikow();
                    cenap *= ile;
                    cena.setText(cenap + "");
                } else {
                    cena.setText("");
                    JOptionPane.showMessageDialog(null, "Niepełne dane!");
                }
            } catch (NumberFormatException nfe) {
                JOptionPane.showMessageDialog(null, "Niepoprawne dane!");
            }
        }
    }//GEN-LAST:event_poleilepKeyPressed

    private void poleilenapKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_poleilenapKeyPressed
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            try {
                int ile = Integer.parseInt(poleilenap.getText());
                if (listawybnazwynap.getSelectedIndex() != -1) {
                    String nazwanap = listawybnazwynap.getSelectedItem().toString();
                    if (nazwanap.length() > 1) {
                        double cenanapoju = podajcenenap(nazwanap);
                        cenanapoju *= ile;
                        cena2.setText(cenanapoju + "");
                    } else {
                        JOptionPane.showMessageDialog(null, "Nie wybrano napoju!");
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "Nie wybrano napoju!");
                }
            } catch (NumberFormatException nfe) {
                JOptionPane.showMessageDialog(null, "Niepoprawne dane!");
            }
        }
    }//GEN-LAST:event_poleilenapKeyPressed

    private void poleilenapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_poleilenapActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_poleilenapActionPerformed

    private void listawybpizzyItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_listawybpizzyItemStateChanged
        model.removeAllElements();
        listaskladnikow.setModel(model);
        zobskl.setSelected(false);
        dodajs.removeAllItems();
        panelskladniki.setVisible(false);
    }//GEN-LAST:event_listawybpizzyItemStateChanged

    private void listawybrozmpizzyItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_listawybrozmpizzyItemStateChanged
        model.removeAllElements();
        listaskladnikow.setModel(model);
        zobskl.setSelected(false);
        dodajs.removeAllItems();
        panelskladniki.setVisible(false);
    }//GEN-LAST:event_listawybrozmpizzyItemStateChanged

    private void listawybciastapizzyItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_listawybciastapizzyItemStateChanged
        model.removeAllElements();
        listaskladnikow.setModel(model);
        zobskl.setSelected(false);
        dodajs.removeAllItems();
        panelskladniki.setVisible(false);
    }//GEN-LAST:event_listawybciastapizzyItemStateChanged

    private void usunpozycjepActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_usunpozycjepActionPerformed
        if (!listazamowienpizzy.isSelectionEmpty()) {
            int ilepozycji = modelzamp.getSize();
            int index = listazamowienpizzy.getSelectedIndex();
            usunpizzezzam(index, ilepozycji);
            dodajpizzedozamowienia();
        } else {
            JOptionPane.showMessageDialog(null, "Wybierz pozycję!");
        }
    }//GEN-LAST:event_usunpozycjepActionPerformed

    private void buttonpotwierdzActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonpotwierdzActionPerformed
        double wart = 0;
        try {
            wart = Double.parseDouble(cena1.getText());
        } catch (NumberFormatException nfe) {
        }
        String platnosc = "";
        String forma = "";
        if ((wdostawie.isSelected() || wlokalu.isSelected()) && (karta.isSelected() || gotowka.isSelected()) && wart > 0) {
            if (karta.isSelected()) {
                platnosc = "K";
            } else if (gotowka.isSelected()) {
                platnosc = "G";
            }
            if (wdostawie.isSelected()) {
                forma = "D";
            } else if (wlokalu.isSelected()) {
                forma = "L";
            }
            try {
                con = DriverManager.getConnection(
                        "jdbc:derby://localhost:1527/BazaPizzerii", "pizzeria", "pizzeria"
                );
                stmt11 = con.createStatement();
                stmt11.executeUpdate(
                        "update zamowienie set data_zam='" + sprawdzdate() + "',platnosc='" + platnosc + "',forma='"
                        + forma + "',wartosc=" + wart + ",id_prac=" + sprawdzid() + " where id_zam=(select max(id_zam) from zamowienie)"
                );
                stmt11.executeUpdate(
                        "delete from szcz_o_skl where id_szcz_o_pizzy="
                        + "(select max(id_szcz_o_pizzy) from szcz_o_pizzy)"
                );
                stmt11.executeUpdate(
                        "delete from szcz_o_pizzy where id_szcz_o_pizzy=(select max(id_szcz_o_pizzy) from szcz_o_pizzy)"
                );
                stmt11.executeUpdate(
                        "delete from szcz_o_napoju where id_szcz_o_nap=(select max(id_szcz_o_nap) from szcz_o_napoju)"
                );
            } catch (SQLException ex) {
               JOptionPane.showMessageDialog(null, "Brak połączenia z bazą danych!");
            }
            if (wdostawie.isSelected()) {
                String[] opcje = new String[2];
                opcje[0] = new String("OK");
                opcje[1] = new String("Anuluj");
                int res = JOptionPane.showOptionDialog(null, "Wybierz klienta lub dodaj nowego", "Potwierdzenie", 0, JOptionPane.QUESTION_MESSAGE, null, opcje, null);
                switch (res) {
                    case JOptionPane.YES_OPTION:
                        Edycja_klientow ek = new Edycja_klientow();
                        ek.setCzyzamtrwa(true);
                        ek.pokazpanel();
                        ek.setLocationRelativeTo(null);
                        ek.setVisible(true);
                        setVisible(false);
                        break;
                    case JOptionPane.NO_OPTION:
                        break;
                }
            } else if (wlokalu.isSelected()) {
                Szczegoly_zamowienia sz = new Szczegoly_zamowienia();
                sz.setLocationRelativeTo(null);
                sz.setVisible(true);
                dispose();
            }
        } else {
            JOptionPane.showMessageDialog(null, "Brak danych");
        }

    }//GEN-LAST:event_buttonpotwierdzActionPerformed

    private void cena1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cena1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_cena1ActionPerformed

    private void buttonusunnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_buttonusunnActionPerformed
        if (!listazamowiennapojow.isSelectionEmpty()) {
            int ilepozycji = modelzamn.getSize();
            int index = listazamowiennapojow.getSelectedIndex();
            usunnapojzzam(index, ilepozycji);
            dodajnapojdozamowienia();
        } else {
            JOptionPane.showMessageDialog(null, "Wybierz pozycję!");
        }
    }//GEN-LAST:event_buttonusunnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(NoweZamLok.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new NoweZamLok().setVisible(true);
                // NoweZamLok nzl = new NoweZamLok();
                //nzl.setVisible(false);

            }

        });

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroupmiejsce;
    private javax.swing.ButtonGroup buttonGroupoplata;
    private javax.swing.JButton buttonpotwierdz;
    private javax.swing.JButton buttonusunn;
    private javax.swing.JTextField cena;
    private javax.swing.JTextField cena1;
    private javax.swing.JTextField cena2;
    private javax.swing.JLabel dlapelnoletnich;
    private javax.swing.JButton dodajdomenunap;
    private javax.swing.JButton dodajdomenup;
    private javax.swing.JComboBox dodajs;
    private javax.swing.JButton dodajw;
    private javax.swing.JLabel formaoplaty;
    private javax.swing.JLabel formazam;
    private javax.swing.JRadioButton gotowka;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JScrollPane jScrollPane4;
    private javax.swing.JRadioButton karta;
    private javax.swing.JList listaskladnikow;
    private javax.swing.JComboBox listawybciastapizzy;
    private javax.swing.JComboBox listawybnazwynap;
    private javax.swing.JComboBox listawybpizzy;
    private javax.swing.JComboBox listawybrodznap;
    private javax.swing.JComboBox listawybrozmpizzy;
    private javax.swing.JList<String> listazamowiennapojow;
    private javax.swing.JList listazamowienpizzy;
    private javax.swing.JLabel napis_zl;
    private javax.swing.JLabel napis_zl1;
    private javax.swing.JLabel napis_zl2;
    private javax.swing.JLabel napisdodwybskl;
    private javax.swing.JLabel napisilenap;
    private javax.swing.JLabel napisilepizz;
    private javax.swing.JLabel napisnazwanapoju;
    private javax.swing.JLabel napisnazwapizzy;
    private javax.swing.JLabel napisrodzajciasta;
    private javax.swing.JLabel napisrodzajnapoju;
    private javax.swing.JLabel napisrozmiarpizzy;
    private javax.swing.JLabel napistytul;
    private javax.swing.JLabel napiszamowiono;
    private javax.swing.JTextArea opisnapoju;
    private javax.swing.JPanel panelnapoj;
    private javax.swing.JPanel panelopisnap;
    private javax.swing.JPanel panelpizza;
    private javax.swing.JPanel panelskladniki;
    private javax.swing.JToggleButton pokazopisnapoju;
    private javax.swing.JToggleButton pokazpanelnapoj;
    private javax.swing.JToggleButton pokazpanelpizza;
    private javax.swing.JTextField poleilenap;
    private javax.swing.JTextField poleilep;
    private javax.swing.JButton powrot;
    private javax.swing.JButton usunpozycjep;
    private javax.swing.JButton usuns;
    private javax.swing.JRadioButton wdostawie;
    private javax.swing.JRadioButton wlokalu;
    private javax.swing.JToggleButton zobskl;
    // End of variables declaration//GEN-END:variables

    void zamowpizze() {
        try {
            con = DriverManager.getConnection(
                    "jdbc:derby://localhost:1527/BazaPizzerii", "pizzeria", "pizzeria"
            );
            stmt1 = con.createStatement();
            stmt2 = con.createStatement();
            stmt3 = con.createStatement();
            res1 = stmt1.executeQuery(
                    "select distinct(nazwa) from MENU_PIZZA"
            );
            res2 = stmt2.executeQuery(
                    "select distinct(rozmiar) from MENU_PIZZA"
            );
            res3 = stmt3.executeQuery(
                    "select distinct(ciasto) from MENU_PIZZA"
            );

        } catch (Exception e) {

        }
        try {
            if (listawybpizzy.getItemCount() == 1) {
                while (res1.next()) {

                    listawybpizzy.addItem(res1.getString("nazwa"));
                }
            }
        } catch (SQLException ex) {
           JOptionPane.showMessageDialog(null, "Brak połączenia z bazą danych!");
        }
        try {
            if (listawybrozmpizzy.getItemCount() == 1) {
                while (res2.next()) {

                    listawybrozmpizzy.addItem(res2.getString("rozmiar"));
                }
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Brak połączenia z bazą danych!");
        }

        try {
            if (listawybciastapizzy.getItemCount() == 1) {
                while (res3.next()) {

                    listawybciastapizzy.addItem(res3.getString("ciasto"));
                }
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Brak połączenia z bazą danych!");
        }

    }

    void wypiszskladniki() {
        model.removeAllElements();
        dodajs.removeAllItems();
        dodajs.addItem("");
        String nazwapizzy = listawybpizzy.getSelectedItem().toString();
        String rozmpizzy = listawybrozmpizzy.getSelectedItem().toString();
        try {
            con = DriverManager.getConnection(
                    "jdbc:derby://localhost:1527/BazaPizzerii", "pizzeria", "pizzeria"
            );
            stmt4 = con.createStatement();
            res4 = stmt4.executeQuery(
                    "select * from SKLADNIKI"
            );
        } catch (Exception e) {

        }
        try {
            while (res4.next()) {

                if (rozmpizzy.equals("mała")) {
                    dodajs.addItem(res4.getString("nazwa") + " + " + res4.getString("cena_skl_mala") + " zł");
                } else if (rozmpizzy.equals("średnia")) {
                    dodajs.addItem(res4.getString("nazwa") + " + " + res4.getString("cena_skl_srednia") + " zł");
                } else if (rozmpizzy.equals("duża")) {
                    dodajs.addItem(res4.getString("nazwa") + " + " + res4.getString("cena_skl_duza") + " zł");
                }
            }
        } catch (SQLException ex) {
           JOptionPane.showMessageDialog(null, "Brak połączenia z bazą danych!");
        }

        try {
            con = DriverManager.getConnection(
                    "jdbc:derby://localhost:1527/BazaPizzerii", "pizzeria", "pizzeria"
            );
            stmt5 = con.createStatement();
            res5 = stmt5.executeQuery(
                    "select * from menu_pizza"
            );
        } catch (Exception e) {

        }
        int l = 1;
        try {
            while (res5.next()) {

                if (nazwapizzy.equals(res5.getString("nazwa")) && l == 1) {
                    l++;
                    String wiersz_skladnikow = res5.getString("skladniki");
                    String[] skladniki = rozdzielString(wiersz_skladnikow);
                    int dl = skladniki.length;

                    for (int k = 0; k < dl; k++) {
                        int i = model.getSize();
                        model.add(i, skladniki[k]);
                    }
                    listaskladnikow.setModel(model);
                }
            }
        } catch (SQLException ex) {
           JOptionPane.showMessageDialog(null, "Brak połączenia z bazą danych!");
        }
    }

    void wypiszrodzaje() {
        try {
            con = DriverManager.getConnection(
                    "jdbc:derby://localhost:1527/BazaPizzerii", "pizzeria", "pizzeria"
            );
            stmt6 = con.createStatement();
            res6 = stmt6.executeQuery(
                    "select distinct(rodzaj) from MENU_NAPOJE"
            );

        } catch (Exception e) {

        }
        try {
            if (listawybrodznap.getItemCount() == 1) {
                while (res6.next()) {
                    listawybrodznap.addItem(res6.getString("rodzaj"));
                }
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Brak połączenia z bazą danych!");
        }

    }

    String[] rozdzielString(String str) {
        int dlugosc = str.length();
        int ile = 0;
        for (int i = 0; i < dlugosc; i++) {
            char znak = str.charAt(i);
            if (znak == ',') {
                ile++;
            }
        }
        ile++;
        String[] skladniki = new String[ile];
        int pocz = 0;
        int i = 0;
        for (int nr = 0; nr < dlugosc; nr++) {
            char znak = str.charAt(nr);
            if (znak == ',') {
                String skl = str.substring(pocz, nr);
                if (skl.charAt(0) == ' ') {
                    skl = skl.substring(1);
                }
                skladniki[i] = skl;
                i++;
                pocz = nr + 1;
            }
        }
        String ostatni = str.substring(pocz);
        if (ostatni.charAt(0) == ' ') {
            ostatni = ostatni.substring(1);
        }
        skladniki[i] = ostatni;
        return skladniki;
    }

    void pokaznazwynapojow(String rodzaj) {
        try {
            con = DriverManager.getConnection(
                    "jdbc:derby://localhost:1527/BazaPizzerii", "pizzeria", "pizzeria"
            );
            stmt7 = con.createStatement();
            res7 = stmt7.executeQuery(
                    "select distinct(nazwa_napoju) from MENU_NAPOJE where rodzaj like '" + rodzaj + "'"
            );
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Brak połączenia z bazą danych!");
        }
        try {
            if (listawybnazwynap.getItemCount() == 1) {
                while (res7.next()) {
                    listawybnazwynap.addItem(res7.getString("nazwa_napoju"));
                }
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Brak połączenia z bazą danych!");
        }
    }

    void dodajopis(String nazwa) {
        String opis = "";
        try {
            con = DriverManager.getConnection(
                    "jdbc:derby://localhost:1527/BazaPizzerii", "pizzeria", "pizzeria"
            );
            stmt8 = con.createStatement();
            res8 = stmt8.executeQuery(
                    "select * from MENU_NAPOJE where nazwa_napoju like '" + nazwa + "'"
            );
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Brak połączenia z bazą danych!");
        }
        try {
            while (res8.next()) {
                opis += "Objętość: ";
                opis += res8.getString("objetosc");
                opis += "\nDla pełnoletnich: ";
                String dlapeln = res8.getString("dla_pelnoletnich");
                if (dlapeln.contains("T")) {
                    opis += "tak";
                } else {
                    opis += "nie";
                }
                if (res8.getString("opis") != null) {
                    opis += "\nDodatkowe informacje: ";
                    opis += res8.getString("opis");
                }
            }
            opisnapoju.setText(opis);
        } catch (SQLException ex) {
           JOptionPane.showMessageDialog(null, "Brak połączenia z bazą danych!");
        }
    }

    double policzkosztpizzyzbazy() {
        double cena = 0;
        try {
            con = DriverManager.getConnection(
                    "jdbc:derby://localhost:1527/BazaPizzerii", "pizzeria", "pizzeria"
            );
            stmt9 = con.createStatement();
            res9 = stmt9.executeQuery(
                    "select cena_pizza from MENU_PIZZA as mp join szcz_o_pizzy as sp on mp.ID_PIZZY=sp.ID_PIZZY join zamowienie as z on z.ID_ZAM=sp.ID_ZAM\n"
                    + " where z.ID_ZAM=(select max(id_zam) from zamowienie) and sp.ID_SZCZ_O_PIZZY=(select max(ID_SZCZ_O_PIZZY)-1 from szcz_o_pizzy)"
            );
            while (res9.next()) {
                cena = res9.getDouble("cena_pizza");
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Brak połączenia z bazą danych!");
        }
        return cena;
    }

    double policzkosztnapojuzbazy() {
        double cena = 0;
        try {
            con = DriverManager.getConnection(
                    "jdbc:derby://localhost:1527/BazaPizzerii", "pizzeria", "pizzeria"
            );
            stmt9 = con.createStatement();
            res9 = stmt9.executeQuery(
                    "select cena from MENU_NAPOJE as mn join szcz_o_napoju as sn on mn.ID_NAPOJU=sn.ID_NAPOJU join zamowienie as z on z.ID_ZAM=sn.ID_ZAM\n"
                    + " where z.ID_ZAM=(select max(id_zam) from zamowienie) and sn.ID_SZCZ_O_NAP=(select max(ID_SZCZ_O_NAP)-1 from szcz_o_napoju)"
            );
            while (res9.next()) {
                cena = res9.getDouble("cena");
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Brak połączenia z bazą danych!");
        }
        return cena;
    }

    double podajkosztpizzy() {
        double cenaa = 0;
        String nazwa = listawybpizzy.getSelectedItem().toString();
        String rozmiar = listawybrozmpizzy.getSelectedItem().toString();
        String ciasto = listawybciastapizzy.getSelectedItem().toString();
        try {
            con = DriverManager.getConnection(
                    "jdbc:derby://localhost:1527/BazaPizzerii", "pizzeria", "pizzeria"
            );
            stmt9 = con.createStatement();
            res9 = stmt9.executeQuery(
                    "select cena_pizza from MENU_PIZZA where nazwa like '%" + nazwa + "%' and rozmiar like '%" + rozmiar
                    + "%' and ciasto like '%" + ciasto + "%'"
            );
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Brak połączenia z bazą danych!");
        }
        try {
            while (res9.next()) {
                cenaa += res9.getDouble("cena_pizza");
            }
        } catch (SQLException ex) {
           JOptionPane.showMessageDialog(null, "Brak połączenia z bazą danych!");
        }
        return cenaa;
    }

    double policzkosztskladnikow() {
        double kosztskl = 0;
        String polmalej = "SELECT sum(cena_skl_mala) from skladniki as s "
                + "join szcz_o_skl as ss on s.ID_SKLADNIKA=ss.ID_SKLADNIKA join szcz_o_pizzy as sp on ss.ID_SZCZ_O_PIZZY=sp.ID_SZCZ_O_PIZZY "
                + "join zamowienie as z on z.ID_ZAM=sp.ID_ZAM where z.ID_ZAM=(select max(id_zam) from zamowienie) "
                + "and sp.ID_SZCZ_O_PIZZY=(select max(id_szcz_o_pizzy)-1 from szcz_o_pizzy)";
        String polsredniej = "SELECT sum(cena_skl_srednia) from skladniki as s "
                + "join szcz_o_skl as ss on s.ID_SKLADNIKA=ss.ID_SKLADNIKA join szcz_o_pizzy as sp on ss.ID_SZCZ_O_PIZZY=sp.ID_SZCZ_O_PIZZY "
                + "join zamowienie as z on z.ID_ZAM=sp.ID_ZAM where z.ID_ZAM=(select max(id_zam) from zamowienie) "
                + "and sp.ID_SZCZ_O_PIZZY=(select max(id_szcz_o_pizzy)-1 from szcz_o_pizzy)";
        String polduzej = "SELECT sum(cena_skl_duza) from skladniki as s "
                + "join szcz_o_skl as ss on s.ID_SKLADNIKA=ss.ID_SKLADNIKA join szcz_o_pizzy as sp on ss.ID_SZCZ_O_PIZZY=sp.ID_SZCZ_O_PIZZY "
                + "join zamowienie as z on z.ID_ZAM=sp.ID_ZAM where z.ID_ZAM=(select max(id_zam) from zamowienie) "
                + "and sp.ID_SZCZ_O_PIZZY=(select max(id_szcz_o_pizzy)-1 from szcz_o_pizzy)";
        try {
            con = DriverManager.getConnection(
                    "jdbc:derby://localhost:1527/BazaPizzerii", "pizzeria", "pizzeria"
            );
            stmt9 = con.createStatement();
            res9 = stmt9.executeQuery(
                    "select rozmiar from MENU_PIZZA as mp join szcz_o_pizzy as sp on mp.ID_PIZZY=sp.ID_PIZZY"
                    + " join zamowienie as z on z.ID_ZAM=sp.ID_ZAM where z.id_zam=(select max(id_zam) from zamowienie) "
                    + "and sp.ID_SZCZ_O_PIZZY=(select max(id_szcz_o_pizzy)-1 from szcz_o_pizzy)"
            );
            while (res9.next()) {
                String rozm = res9.getString("rozmiar");
                if (rozm.contains("mała")) {
                    stmt10 = con.createStatement();
                    res10 = stmt10.executeQuery(polmalej);
                } else if (rozm.contains("średnia")) {
                    stmt10 = con.createStatement();
                    res10 = stmt10.executeQuery(polsredniej);
                } else if (rozm.contains("duża")) {
                    stmt10 = con.createStatement();
                    res10 = stmt10.executeQuery(polduzej);
                }
                while (res10.next()) {
                    kosztskl = res10.getDouble("1");
                }
            }
        } catch (SQLException ex) {
           JOptionPane.showMessageDialog(null, "Brak połączenia z bazą danych!");
        }
        return kosztskl;
    }

    double podajkosztskladnikow() {

        double cenaskl = 0;
        int ile = model.getSize();
        for (int i = 0; i < ile; i++) {
            String skl = model.getElementAt(i);
            if (skl.contains("+")) {
                char[] znaki = skl.toCharArray();
                int dl = znaki.length;
                for (int k = 0; k < dl; k++) {
                    char j = znaki[k];
                    if (j == '+') {
                        String cn = skl.substring(k + 1, k + 5);
                        double cn1 = Double.parseDouble(cn);
                        cenaskl += cn1;
                        break;
                    }
                }
            }
        }
        return cenaskl;
    }

    double podajcenenap(String nazwa) {
        double cenanap = 0;
        try {
            con = DriverManager.getConnection(
                    "jdbc:derby://localhost:1527/BazaPizzerii", "pizzeria", "pizzeria"
            );
            stmt10 = con.createStatement();
            res10 = stmt10.executeQuery(
                    "select cena from MENU_NAPOJE where nazwa_napoju like '" + nazwa + "'"
            );

        } catch (SQLException ex) {
           JOptionPane.showMessageDialog(null, "Brak połączenia z bazą danych!");
        }
        try {
            while (res10.next()) {
                cenanap += res10.getDouble("cena");
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Brak połączenia z bazą danych!");
        }
        return cenanap;
    }

    void zliczcene(Double c) {
        String stcena = cena1.getText();
        if (stcena.length() > 0) {
            Double cenarazem = Double.parseDouble(stcena);
            cenarazem += c;
            cena1.setText(cenarazem + "");
        } else {
            cena1.setText(c + "");
        }
    }

    void dodajzampizzy(String nazwa, String rozmiar, String ciasto, int ile) {
        try {
            con = DriverManager.getConnection(
                    "jdbc:derby://localhost:1527/BazaPizzerii", "pizzeria", "pizzeria"
            );
            stmt13 = con.createStatement();
            stmt13.executeUpdate(
                    "update szcz_o_pizzy set id_pizzy=(select id_pizzy from menu_pizza "
                    + "where nazwa like '" + nazwa + "' and rozmiar like '" + rozmiar + "' and ciasto like '" + ciasto + "'),"
                    + "ile_sztuk_p=" + ile + " where id_szcz_o_pizzy=(select max(id_szcz_o_pizzy) from szcz_o_pizzy)"
            );
            stmt13.executeUpdate(
                    "insert into szcz_o_pizzy values ((select max(id_szcz_o_pizzy)+1 from szcz_o_pizzy),(select max(id_zam) from zamowienie),1,0)"
            );
        } catch (SQLException ex) {
           JOptionPane.showMessageDialog(null, "Brak połączenia z bazą danych!");
        }
    }

    void dodajzamnapoju(String nazwanap, int ile) {
        try {
            con = DriverManager.getConnection(
                    "jdbc:derby://localhost:1527/BazaPizzerii", "pizzeria", "pizzeria"
            );
            stmt13 = con.createStatement();
            stmt13.executeUpdate(
                    "update szcz_o_napoju set id_napoju=(select id_napoju from menu_napoje "
                    + "where nazwa_napoju like '" + nazwanap + "'),ile_sztuk_nap=" + ile
                    + " where id_szcz_o_nap=(select max(id_szcz_o_nap) from szcz_o_napoju)"
            );
            stmt13.executeUpdate(
                    "insert into szcz_o_napoju (id_szcz_o_nap, id_zam, id_napoju, ile_sztuk_nap) values ((select max(id_szcz_o_nap)+1 from szcz_o_napoju),(select max(id_zam) from zamowienie), 1, 0)"
            );
        } catch (SQLException ex) {
           JOptionPane.showMessageDialog(null, "Brak połączenia z bazą danych!");
        }
    }

    void czyscpanelpizza() {
        listawybpizzy.setSelectedIndex(0);
        listawybrozmpizzy.setSelectedIndex(0);
        listawybciastapizzy.setSelectedIndex(0);
        dodajs.setSelectedIndex(-1);
        cena.setText("");
        poleilep.setText("");
        panelskladniki.setVisible(false);
        pokazpanelpizza.setSelected(false);
        panelpizza.setVisible(false);
    }

    void czyscpanelnapoje() {
        listawybrodznap.setSelectedIndex(0);
        poleilenap.setText("");
        cena2.setText("");
        pokazpanelnapoj.setSelected(false);
        panelnapoj.setVisible(false);
    }

    String sprawdzdate() {
        DateFormat df = new SimpleDateFormat("dd/MM/yy HH:mm:ss");
        Date dateobj = new Date();
        return df.format(dateobj);
    }

    int sprawdzid() {
        int id = 0;
        try {
            con = DriverManager.getConnection(
                    "jdbc:derby://localhost:1527/BazaPizzerii", "pizzeria", "pizzeria"
            );
            stmt12 = con.createStatement();
            res = stmt12.executeQuery("select * from LOGOWANIE L join PRACOWNICY P on L.id_prac=P.id_prac where id_log=(select max(id_log) from LOGOWANIE)");
            while (res.next()) {
                id = res.getInt("id_prac");
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Brak połączenia z bazą danych!");
        }
        return id;
    }

    void dodajnapojdozamowienia() {
        try {
            con = DriverManager.getConnection(
                    "jdbc:derby://localhost:1527/BazaPizzerii", "pizzeria", "pizzeria"
            );
            stmt2 = con.createStatement();
            res2 = stmt2.executeQuery(
                    "select * from ZAMOWIENIE Z join SZCZ_O_NAPOJU AS N on Z.ID_ZAM=N.ID_ZAM"
                    + " join MENU_NAPOJE AS M on N.ID_NAPOJU=M.ID_NAPOJU"
                    + " where Z.id_zam=(select max(id_zam) from ZAMOWIENIE) "
            );
            modelzamn.removeAllElements();
            while (res2.next()) {
                int ilenapojow = res2.getInt("ile_sztuk_nap");
                String napoj = ilenapojow + "";
                napoj += "x " + res2.getString("nazwa_napoju");
                if (ilenapojow > 0) {
                    modelzamn.addElement(napoj);
                }
            }
            listazamowiennapojow.setModel(modelzamn);
        } catch (SQLException ex) {
        }
    }

    void dodajpizzedozamowienia() {
        try {
            con = DriverManager.getConnection(
                    "jdbc:derby://localhost:1527/BazaPizzerii", "pizzeria", "pizzeria"
            );
            stmt2 = con.createStatement();
            res2 = stmt2.executeQuery(
                    "select * from ZAMOWIENIE Z join SZCZ_O_PIZZY AS SP on Z.ID_ZAM=SP.ID_ZAM"
                    + " join MENU_PIZZA AS MP on SP.ID_PIZZY=MP.ID_PIZZY where Z.id_zam=(select max(id_zam) from ZAMOWIENIE)"
            );
            modelzamp.removeAllElements();
            while (res2.next()) {
                int idszcz = res2.getInt("id_szcz_o_pizzy");
                int ilepizzy = res2.getInt("ile_sztuk_p");
                String pizza = ilepizzy + "";
                pizza += "x " + res2.getString("nazwa");
                pizza += " " + res2.getString("rozmiar");
                String ciasto = res2.getString("ciasto");
                if (ciasto.contains("grube")) {
                    pizza += " na grubym cieście";
                } else if (ciasto.contains("cienkie")) {
                    pizza += " na cienkim cieście";
                }
                pizza += " " + dodajskladniki(idszcz);
                if (ilepizzy > 0) {
                    modelzamp.addElement(pizza);
                }
            }
            listazamowienpizzy.setModel(modelzamp);
        } catch (SQLException ex) {
        }
    }

    String dodajskladniki(int idszcz) {
        String skladnik = "";
        try {
            con = DriverManager.getConnection(
                    "jdbc:derby://localhost:1527/BazaPizzerii", "pizzeria", "pizzeria"
            );
            stmt4 = con.createStatement();
            res4 = stmt4.executeQuery(
                    "select * from ZAMOWIENIE AS Z join SZCZ_O_PIZZY AS SP on Z.ID_ZAM=SP.ID_ZAM"
                    + " join SZCZ_O_SKL AS SS on SP.ID_SZCZ_O_PIZZY=SS.ID_SZCZ_O_PIZZY"
                    + " JOIN SKLADNIKI AS S ON SS.ID_SKLADNIKA=S.ID_SKLADNIKA"
                    + " where Z.id_zam=(select max(id_zam) from ZAMOWIENIE)"
                    + " and sp.id_szcz_o_pizzy=" + idszcz
            );
            while (res4.next()) {
                skladnik += "+ " + res4.getString("nazwa") + ", ";
            }
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, "Brak połączenia z bazą danych!");
        }
        if (skladnik.length() > 0) {
            return skladnik.substring(0, skladnik.length() - 2);
        } else {
            return "";
        }
    }

    void usunpizzezzam(int index, int ilepozycji) {
        double kosztpizzaiskl = 0;
        int idsz = index - ilepozycji;
        String idszcz = "";
        if (idsz >= 0) {
            idszcz = "+" + idsz;
        } else {
            idszcz = "" + idsz;
        }
        String polmalej = "SELECT sum(cena_skl_mala) from skladniki as s "
                + "join szcz_o_skl as ss on s.ID_SKLADNIKA=ss.ID_SKLADNIKA join szcz_o_pizzy as sp on ss.ID_SZCZ_O_PIZZY=sp.ID_SZCZ_O_PIZZY "
                + "join zamowienie as z on z.ID_ZAM=sp.ID_ZAM where z.ID_ZAM=(select max(id_zam) from zamowienie) "
                + "and sp.ID_SZCZ_O_PIZZY=(select max(id_szcz_o_pizzy) from szcz_o_pizzy)" + idszcz;
        String polsredniej = "SELECT sum(cena_skl_srednia) from skladniki as s "
                + "join szcz_o_skl as ss on s.ID_SKLADNIKA=ss.ID_SKLADNIKA join szcz_o_pizzy as sp on ss.ID_SZCZ_O_PIZZY=sp.ID_SZCZ_O_PIZZY "
                + "join zamowienie as z on z.ID_ZAM=sp.ID_ZAM where z.ID_ZAM=(select max(id_zam) from zamowienie) "
                + "and sp.ID_SZCZ_O_PIZZY=(select max(id_szcz_o_pizzy) from szcz_o_pizzy)" + idszcz;
        String polduzej = "SELECT sum(cena_skl_duza) from skladniki as s "
                + "join szcz_o_skl as ss on s.ID_SKLADNIKA=ss.ID_SKLADNIKA join szcz_o_pizzy as sp on ss.ID_SZCZ_O_PIZZY=sp.ID_SZCZ_O_PIZZY "
                + "join zamowienie as z on z.ID_ZAM=sp.ID_ZAM where z.ID_ZAM=(select max(id_zam) from zamowienie) "
                + "and sp.ID_SZCZ_O_PIZZY=(select max(id_szcz_o_pizzy) from szcz_o_pizzy)" + idszcz;
        try {
            con = DriverManager.getConnection(
                    "jdbc:derby://localhost:1527/BazaPizzerii", "pizzeria", "pizzeria"
            );
            stmt13 = con.createStatement();
            res13 = stmt13.executeQuery(
                    "select rozmiar,cena_pizza,ile_sztuk_p from menu_pizza as mp join szcz_o_pizzy as sp "
                    + "on mp.id_pizzy=sp.id_pizzy where sp.id_szcz_o_pizzy=(select max(id_szcz_o_pizzy) "
                    + "from szcz_o_pizzy)" + idszcz + " and id_zam=(select max(id_zam) from zamowienie)");
            while (res13.next()) {
                String rozmiar = res13.getString("rozmiar");
                Double cenapizzy = res13.getDouble("cena_pizza");
                int ilerazy = res13.getInt("ile_sztuk_p");
                if (rozmiar.contains("mała")) {
                    stmt10 = con.createStatement();
                    res10 = stmt10.executeQuery(polmalej);
                } else if (rozmiar.contains("średnia")) {
                    stmt10 = con.createStatement();
                    res10 = stmt10.executeQuery(polsredniej);
                } else if (rozmiar.contains("duża")) {
                    stmt10 = con.createStatement();
                    res10 = stmt10.executeQuery(polduzej);
                }
                while (res10.next()) {
                    kosztpizzaiskl = res10.getInt("1");
                    kosztpizzaiskl += cenapizzy;
                    kosztpizzaiskl *= ilerazy;
                    double wartosc = Double.parseDouble(cena1.getText());
                    wartosc -= kosztpizzaiskl;
                    cena1.setText(wartosc + "");
                }
            }
            stmt12 = con.createStatement();
            res12 = stmt12.executeQuery("select id_szcz_o_pizzy from szcz_o_pizzy where id_szcz_o_pizzy=(select max(id_szcz_o_pizzy) from szcz_o_pizzy)" + idszcz + " and id_zam=(select max(id_zam) from zamowienie)"
            );
            while (res12.next()) {
                int idusuniete = res12.getInt("id_szcz_o_pizzy");
                stmt14 = con.createStatement();
                res14 = stmt14.executeQuery("select max(id_szcz_o_skl) from szcz_o_skl where id_szcz_o_pizzy=" + idusuniete);
                while (res14.next()) {
                    int idpizzy = res14.getInt("1");
                    stmt15 = con.createStatement();
                    res15 = stmt15.executeQuery("select count(id_szcz_o_skl) from szcz_o_skl where id_szcz_o_pizzy=" + idusuniete);
                    while (res15.next()) {
                        int ileskl = res15.getInt("1");
                        stmt13.executeUpdate(
                                "delete from szcz_o_skl where id_szcz_o_pizzy=" + idusuniete
                        );                       
                        stmt13.executeUpdate(
                                "delete from szcz_o_pizzy where id_szcz_o_pizzy=" + idusuniete
                        );
                        stmt13.executeUpdate(
                                "update szcz_o_pizzy set id_szcz_o_pizzy=id_szcz_o_pizzy-1 where id_szcz_o_pizzy>" + idusuniete
                        );
                        if (ileskl > 0 && idpizzy > 0) {
                         stmt13.executeUpdate(
                                "update szcz_o_skl set id_szcz_o_skl=id_szcz_o_skl-" + ileskl + ",id_szcz_o_pizzy=id_szcz_o_pizzy-1 where id_szcz_o_skl>" + idpizzy
                        );
                    }
                        
                    }
                }

            }
        } catch (SQLException ex) {
           JOptionPane.showMessageDialog(null, "Brak połączenia z bazą danych!");
        }
    }

    void usunnapojzzam(int index, int ilepozycji) {
        int idsz = index - ilepozycji;
        String idszcz = "";
        if (idsz >= 0) {
            idszcz = "+" + idsz;
        } else {
            idszcz = "" + idsz;
        }
        try {
            con = DriverManager.getConnection(
                    "jdbc:derby://localhost:1527/BazaPizzerii", "pizzeria", "pizzeria"
            );
            stmt13 = con.createStatement();
            res13 = stmt13.executeQuery("select cena,ile_sztuk_nap from menu_napoje as mn join szcz_o_napoju as sn "
                    + "on mn.id_napoju=sn.id_napoju where sn.id_szcz_o_nap=(select max(id_szcz_o_nap) "
                    + "from szcz_o_napoju)" + idszcz + " and id_zam=(select max(id_zam) from zamowienie)");
            while (res13.next()) {
                double cenaa = res13.getDouble("cena");
                cenaa *= res13.getInt("ile_sztuk_nap");
                double wartosc = Double.parseDouble(cena1.getText());
                wartosc -= cenaa;
                cena1.setText(wartosc + "");
            }
            stmt14 = con.createStatement();
            res14 = stmt14.executeQuery("select id_szcz_o_nap from szcz_o_napoju where id_szcz_o_nap=(select max(id_szcz_o_nap) from szcz_o_napoju)" + idszcz + " and id_zam=(select max(id_zam) from zamowienie)");
            while (res14.next()) {
                int idusuniete = res14.getInt("id_szcz_o_nap");
                stmt13.executeUpdate(
                        "delete from szcz_o_napoju where id_szcz_o_nap=" + idusuniete
                );
                stmt13.executeUpdate(
                        "update szcz_o_napoju set id_szcz_o_nap=id_szcz_o_nap-1 where id_szcz_o_nap>" + idusuniete
                );
            }

        } catch (SQLException ex) {
           JOptionPane.showMessageDialog(null, "Brak połączenia z bazą danych!");
        }
    }
}

